// RTSPServer.cpp : このファイルには 'main' 関数が含まれています。プログラム実行の開始と終了がそこで行われます。
//

///////////////////////////////////////////////////////////////////
// usage
// RTCPServer.exe "( udpsrc port=5004 caps=\"application/x-rtp,media=video,encoding-name=H264,payload=96\" ! rtph264depay ! h264parse ! rtph264pay name=pay0 pt=96 )"
// 各要素の意味
// udpsrc port = 5004
// UDP ソケットを開き、ポート 5004 で受信。
// ここに RTP パケットを送ってもらう設定。
// 例 : ffmpeg - f rtp rtp ://127.0.0.1:5004 などから送信してやる。
// 
// caps = "application/x-rtp,media=video,encoding-name=H264,payload=96"
// caps(ケイパビリティ)   : 受信するストリームの種類やコーデック等を指定する。
// application / x - rtp  : RTP パケットであることを示す。
// media = video          : 映像媒体であることを示す。
// encoding - name = H264 : H.264 形式でエンコードされている。
// payload = 96           : RTP のペイロードタイプ番号。通常、動的な H.264 ストリームでは 96〜127 が使われることが多い。
// 
// rtph264depay
// RTP ペイロード（H.264）をデパケット化するプラグイン。
//「RTP ペイロード → H.264 のバイトストリーム」 へ変換。
// 
// h264parse
// H.264 ビットストリームをパース（解析）・再構築する要素。
// SPS / PPS の挿入・抜き出しや、ストリームのフレーム境界の明示などを行う。
// 
// rtph264pay name = pay0 pt = 96
// H.264 を RTSP 用に再ペイロード化する。
// name = pay0   : RTSP サーバーで pay0 という名前のペイロード要素を作り、配信ストリームとして登録。
// pt = 96       : RTP のペイロードタイプを 96 で運用するよう指定。
// これが test - launch 経由で RTSP のストリームにも反映される。

#include <sstream>
#include <iostream>
#include <gst/gst.h>
#include <gst/rtsp-server/rtsp-server.h>

//#define DEFAULT_RTSP_PORT "8554"
#define DEFAULT_DISABLE_RTCP FALSE

//static char* port = (char*)DEFAULT_RTSP_PORT;           
static gboolean disable_rtcp = DEFAULT_DISABLE_RTCP;    

//static char* channel = (char*)"/test";

//static GOptionEntry entries[] = {
//  {"port", 'p', 0, G_OPTION_ARG_STRING, &port,
//      "Port to listen on (default: " DEFAULT_RTSP_PORT ")", "PORT"},
//  {"disable-rtcp", '\0', 0, G_OPTION_ARG_NONE, &disable_rtcp,
//      "Whether RTCP should be disabled (default false)", NULL},
//  {NULL}
//};

int OpenRTSPServer(int in_port, int out_port, std::string& channel_name)
{
    GMainLoop* loop;
    GstRTSPServer* server;
    GstRTSPMountPoints* mounts;
    GstRTSPMediaFactory* factory;
    GOptionContext* optctx;
    GError* error = NULL;

    std::ostringstream str_GOptionEntry_01;
    str_GOptionEntry_01 << "Port to listen on (default: " << out_port << ")";
    
    std::string str_outport=std::to_string(out_port);
    const size_t buffer_size = 32;                          // バッファのサイズ
    static char tmp_port[buffer_size];                      // 書き込み可能なバッファ
    //strncpy(tmp_port, str_outport.c_str(), buffer_size - 1);
    strcpy_s(tmp_port, buffer_size, str_outport.c_str());//値コピー

    std::ostringstream str_pipeline;
    std::ostringstream sstr_channel;

    str_pipeline << "( udpsrc port=" << in_port << " caps=\"application/x-rtp,media=video,encoding-name=H264,payload=96\" ! rtph264depay ! h264parse ! rtph264pay name=pay0 pt=96 )";
    sstr_channel << "/" << channel_name;

    //tmp_port[buffer_size - 1] = '\0'; // 終端を保証
    //str_outport << out_port;                           //文字列にする
    //size_t buffer_size = str_outport.size() + 1; //バッファサイズ
    //static char* tmp_port;                                    //バッファのポインタ
    //tmp_port = new char[buffer_size];                //メモリ確保
    //char tmp_port[16];                             //バッファ
    //strcpy_s(tmp_port, buffer_size, str_outport.str().c_str());//値コピー

    static GOptionEntry entries[] = {
        {"port",         'p',  0, G_OPTION_ARG_STRING, &(tmp_port),  str_GOptionEntry_01.str().c_str(),               "PORT"},
        {"disable-rtcp", '\0', 0, G_OPTION_ARG_NONE,   &disable_rtcp,"Whether RTCP should be disabled (default false)", NULL},
        {NULL}
    };


    optctx = g_option_context_new("<launch line> - Test RTSP Server, Launch\n\n"
        "Example: \"( videotestsrc ! x264enc ! rtph264pay name=pay0 pt=96 )\"");
    g_option_context_add_main_entries(optctx, entries, NULL);
    g_option_context_add_group(optctx, gst_init_get_option_group());

    if(0)
    {
        //if (!g_option_context_parse(optctx, &argc, &argv, &error)) {
        //    g_printerr("Error parsing options: %s\n", error->message);
        //    g_option_context_free(optctx);
        //    g_clear_error(&error);
        //    return -1;
        //}
    }

    g_option_context_free(optctx);

    loop = g_main_loop_new(NULL, FALSE);

    /* create a server instance */
    server = gst_rtsp_server_new();

    //g_object_set(server, "service", port, NULL);
    g_object_set(server, "service", str_outport.c_str(), NULL);

    /* get the mount points for this server, every server has a default object
     * that be used to map uri mount points to media factories */
    mounts = gst_rtsp_server_get_mount_points(server);

    /* make a media factory for a test stream. The default media factory can use
     * gst-launch syntax to create pipelines.
     * any launch line works as long as it contains elements named pay%d. Each
     * element with pay%d names will be a stream */
    factory = gst_rtsp_media_factory_new();
    //gst_rtsp_media_factory_set_launch(factory, argv[1]);
    gst_rtsp_media_factory_set_launch(factory, str_pipeline.str().c_str());

    gst_rtsp_media_factory_set_shared(factory, TRUE);
    gst_rtsp_media_factory_set_enable_rtcp(factory, !disable_rtcp);

    /* attach the test factory to the /test url */
    //gst_rtsp_mount_points_add_factory(mounts, "/test", factory);
    gst_rtsp_mount_points_add_factory(mounts, sstr_channel.str().c_str(), factory);

    /* don't need the ref to the mapper anymore */
    g_object_unref(mounts);

    /* attach the server to the default maincontext */
    gst_rtsp_server_attach(server, NULL);

    /* start serving */
    //g_print("stream ready at rtsp://127.0.0.1:%s/test\n", port);
    std::cout << "tream ready at rtsp://127.0.0.1:" << str_outport << sstr_channel.str() << std::endl;

    g_main_loop_run(loop);

    delete tmp_port;
    return 0;

}

int main(int argc, char* argv[])
{
    int in_port;
    int out_port;
    std::string str_channel;

    if (argc == 1)
    {
        std::cout << argv[0] << " : use default parametors" << std::endl;

        in_port     = 5004;
        out_port    = 8554;
        str_channel = "test";
    }
    else if (argc == 4)
    {
        std::cout << argv[0] << " : use parametors" << std::endl;

        in_port = std::stoi(argv[1]);
        out_port = std::stoi(argv[2]);
        str_channel = argv[3];
    }
    else
    {
        std::cout << "Usage : " << argv[0] << " [in_port] [out_port] [ch_name]" << std::endl
            << "Example : " << argv[0] << " 5004 8554 ch01" << std::endl;
        return -1;
    }

    std::cout << "[in_port]  : "<<in_port << std::endl
            << "[out_port] : " <<out_port << std::endl
            << "[ch_name]  : " << str_channel << std::endl;
   
    return 0;
}




int main_old(int argc, char* argv[])
{
    std::ostringstream str_pipeline;
    std::ostringstream str_outport;
    std::ostringstream str_channel;

    //std::string str_pipeline("( udpsrc port=5004 caps=\"application/x-rtp,media=video,encoding-name=H264,payload=96\" ! rtph264depay ! h264parse ! rtph264pay name=pay0 pt=96 )");

    if (argc == 1)
    {
        std::cout << argv[0] << " : use default parametors" << std::endl
            << "[in_port]  : 5004" << std::endl
            << "[out_port] : 8554" << std::endl
            << "[ch_name]  : test" << std::endl;

        str_pipeline << "( udpsrc port=5004 caps=\"application/x-rtp,media=video,encoding-name=H264,payload=96\" ! rtph264depay ! h264parse ! rtph264pay name=pay0 pt=96 )";
        str_channel << "/test";
        str_outport << "8554";
    }
    else if (argc == 4)
    {
        str_pipeline << "( udpsrc port="<< argv[1]<< " caps=\"application/x-rtp,media=video,encoding-name=H264,payload=96\" ! rtph264depay ! h264parse ! rtph264pay name=pay0 pt=96 )";
        str_outport << argv[2];
        str_channel << "/" << argv[3];
    }
    else
    {
        std::cout << "Usage : " << argv[0] << " [in_port] [out_port] [ch_name]" << std::endl
            << "Example : " << argv[0] << " 5004 8554 ch01" << std::endl;
        return -1;
    }


    GMainLoop* loop;
    GstRTSPServer* server;
    GstRTSPMountPoints* mounts;
    GstRTSPMediaFactory* factory;
    GOptionContext* optctx;
    GError* error = NULL;

    std::ostringstream str_GOptionEntry_01;
    str_GOptionEntry_01 << "Port to listen on (default: " << str_outport.str().c_str() << ")";
    size_t buffer_size = str_outport.str().size() + 1;

    //ここの処理は引数解析のところに入れたらいいかな
    char* tmp_port;
    tmp_port = new char[buffer_size];
    strcpy_s(tmp_port, buffer_size, str_outport.str().c_str());

    static GOptionEntry entries[] = {
        {"port",         'p',  0, G_OPTION_ARG_STRING, &(tmp_port),  str_GOptionEntry_01.str().c_str(),               "PORT"},
        {"disable-rtcp", '\0', 0, G_OPTION_ARG_NONE,   &disable_rtcp,"Whether RTCP should be disabled (default false)", NULL},
        {NULL}
    };

    optctx = g_option_context_new("<launch line> - Test RTSP Server, Launch\n\n"
        "Example: \"( videotestsrc ! x264enc ! rtph264pay name=pay0 pt=96 )\"");
    g_option_context_add_main_entries(optctx, entries, NULL);
    g_option_context_add_group(optctx, gst_init_get_option_group());

    if (!g_option_context_parse(optctx, &argc, &argv, &error)) {
        g_printerr("Error parsing options: %s\n", error->message);
        g_option_context_free(optctx);
        g_clear_error(&error);
        return -1;
    }
    g_option_context_free(optctx);

    loop = g_main_loop_new(NULL, FALSE);

    /* create a server instance */
    server = gst_rtsp_server_new();

    //g_object_set(server, "service", port, NULL);
    g_object_set(server, "service", str_outport.str().c_str(), NULL);

    /* get the mount points for this server, every server has a default object
     * that be used to map uri mount points to media factories */
    mounts = gst_rtsp_server_get_mount_points(server);

    /* make a media factory for a test stream. The default media factory can use
     * gst-launch syntax to create pipelines.
     * any launch line works as long as it contains elements named pay%d. Each
     * element with pay%d names will be a stream */
    factory = gst_rtsp_media_factory_new();
    //gst_rtsp_media_factory_set_launch(factory, argv[1]);
    gst_rtsp_media_factory_set_launch(factory, str_pipeline.str().c_str());

    gst_rtsp_media_factory_set_shared(factory, TRUE);
    gst_rtsp_media_factory_set_enable_rtcp(factory, !disable_rtcp);

    /* attach the test factory to the /test url */
    //gst_rtsp_mount_points_add_factory(mounts, "/test", factory);
    gst_rtsp_mount_points_add_factory(mounts, str_channel.str().c_str(), factory);

    /* don't need the ref to the mapper anymore */
    g_object_unref(mounts);

    /* attach the server to the default maincontext */
    gst_rtsp_server_attach(server, NULL);

    /* start serving */
    //g_print("stream ready at rtsp://127.0.0.1:%s/test\n", port);
    std::cout << "tream ready at rtsp://127.0.0.1:" << str_outport.str() << str_channel.str() << std::endl;

    g_main_loop_run(loop);

    delete tmp_port;
    return 0;
}
